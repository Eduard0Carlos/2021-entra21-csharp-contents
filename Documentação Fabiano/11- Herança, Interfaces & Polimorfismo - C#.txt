		---Herança---

	Herança é um tipo de associação que permite que uma classe use dados e comportamentos que pertencem a outra classe.
	Ao declarar uma classe, podemos especificar uma classe que servirá de base para a classe que acabamos de criar. Para isso, declaramos (criamos) a classe, e logo em seguida inserimos dois pontos, junto com o nome da classe-base.

public class ClasseBase(int x, int y)
{
	public int X { get; set; }
	public int Y { get; set; }

	X = x;
	Y = y;

public class ClasseExemplo : ClasseBase
{
	public int Z { get; set; }

	public 3Dpoint (int x, int y, int z) : base (x, y)
	{
		Z = z;
	}
}

OBS: O comando "base" funciona de forma semelhante ao comando "this", mas este faz referência a classe-base da classe em que você, desenvolvedor, está escrevendo no momento.
______________________________________________________________________________
public class Veiculo(int VM, bool ligado)
{
	public int VelocidadeMax { get; set; }
	public bool Ligado { get; set; }
	This.VelocidadeMax = VM;
	This.Ligado = Ligado;

	public void Ligar()
	{
		This.Ligado = true;
	}
	public void Desligar()
	{
		This.Ligado = false;
	}
]
public class Carro : Veículo
{
	Ligado = Desligar();
}

	Como o próprio nome sugere, herança sugere que a ClasseExemplo herda implicitamente os componentes da ClasseBase (com exceção dos objetos, construtores, destrutores e componentes privados. Com exceção dessas, ela pode herdar todos os componentes da classe-pai). 

OBS: Quando você cria um construtor para a classe-pai que aceite parâmetros, você OBRIGATÓRIAMENTE deve criar um construtor da classe-filha, que invoque o construtor da classe-pai, e DEVE passar os parâmetros.

	Uma classe derivada pode criar novas propriedades, métodos e objetos, mas não pode remover os componentes que herdou da classe-pai.

	É possível sobrescrever (ou seja, editar) métodos herdados. Para isso, quando criarmos um método, usamos o modificador "virtual" para permitir que as subclasses que herdarem esse método possam sobreescreve-lo.
	Para sobrescrever um método herdado, usamos a palavra chave "override".

class Brasileiro
{
	public double Salário { get; set; }
	public virtual double Trabalhar()
	{
		return 5000;
	}
}

class Rico : Brasileiro
{
	public double Pensao { get; set; }
	public override double Trabalhar(int salário)
	{
		return base.Trabalhar() * 2;
		//este método é herdado da classe brasileiro.
	}
}

class Pobre : Brasileiro
{
	public int aluguel { get; set; }
	public int Financiamento { get; set; }
	public override double Trabalhar()
	{
		return base.Trabalhar() / 2;
		//este método é herdado da classe brasileiro.
	}
}

class Politico ; Rico
{
	public string Partido { get; set; }
	public double Lavagem { get; set; }
	
	public override double Trabalhar()
	{
		return base.Trabalhar() * 2;
		//este método é herdado da classe Rico
	}
}
	
		--Interfaces--

	Uma interface é "como uma classe" sem implementações, e que serve apenas para referência e consumo de outras classes. É EXTREMAMENTE utilizado como uma espécie de "herança multípla" e conceitos de injeção de dependência.

interface Iladrão
{
	void Roubar(Brasileiro b);
	double ValorRoubado { get; set; }
}
OBS: Toda nomenclatura de interface DEVE comecar com "I".

class Corinthiano : Pobre, Iladrão
{
	double ValorRoubado { get; set; }
	void Roubar(Brasileiro b)
	{
		if (b is Corinthiano)
		{
			return;
		}
	this.ValorRoubado += b.Trabalhar();

	//Isto é um exemplo de polimorfismo, pois o método "Trabalhar" muda dependendo de qual objeto o chamou.

	}
}

OBS: A classe só pode herdar de interface se ela conter todas as propriedades e métodos contidos na interface.


