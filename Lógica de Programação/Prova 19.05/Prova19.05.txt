Carlos Eduardo Vieira - C# Oficial

1)Elabore um algoritmo que imprima os número 0, 3, 6, 9 e 12 na tela. Use o comando while para tal. Não é necessário criar um procedimento/método/função para resolução desta questão.

namespace primeiro
{
    public partial class FormProva1_ : Form
    {
        public FormProva1_()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            int i = 0;
            string mensagem = "";

            while (i <= 12)
            {
                mensagem += i + ", ";
                i += 3;
            }

            MessageBox.Show(mensagem);
        }
    }
}


2)Elabore um algoritmo que imprima os números múltiplos de 10, de 10 até 100. Use o comando for para tal. Não é necessário criar um procedimento/método/função para resolução desta questão.

namespace primeiro
{
    public partial class FormProva1_ : Form
    {
        public FormProva1_()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string mensagem = "";

            for (int i = 10; i <= 100; i += 10)
            {
                mensagem += i + ", ";   
            }

            MessageBox.Show(mensagem);
        }
    }
}


3)Crie uma lista de 5 posições que só aceita números pares. Cada vez que o usuário informar um número impar, o programa deve imprimir uma mensagem avisando que o vetor só aceita números pares. O programa também deve permitir calcular a soma de todos os valores da lista. Tanto a adição de elementos na lista quanto o cálculo da soma dos elementos devem estar encapsulados dentro de métodos. 

namespace primeiro
{
    public partial class FormProva1_ : Form
    {
        public FormProva1_()
        {
            InitializeComponent();
        }

        List<int> numerosPares = new List<int>();

        private void button1_Click(object sender, EventArgs e)
        {
            int.TryParse(txtNumeroInformado.Text, out int numero);

            MessageBox.Show(AdicionarNumeroPar(numero));
        }

        private void button2_Click(object sender, EventArgs e)
        {
            MessageBox.Show($"A soma dos números na lista é: {SomarNumeros()}");
        }

        string AdicionarNumeroPar(int numero)
        {
	    if (numerosPares.Count() == 5)
	    {
               return "Não foi possível adicionar o número, pois a lista atingiu o limite de 5 números pares";
            }

            if (numero % 2 == 0)
            { 
                numerosPares.Add(numero);
                return "Número adicionado com sucesso!";
            }
            else
            {
                return "Não foi possível adicionar o número, pois o vetor aceita somente números pares!";
            }
        }

        int SomarNumeros()
        {
            return numerosPares.Sum();
        }
    }
}


4)Crie um programa que simule um jogo de acerto. Primeiro o usuário 1 deve digitar uma palavra. Após este processo, o usuário 2 terá 5 tentativas para adivinhar a palavra. Caso acerte, o programa deve imprimir "Acertou em X tentativas", onde X é o número de vezes que ele tentou. Se no final das 5 tentativas o usuário não acertou, o programa deve imprimir "Você perdeu, a palavra era Y", onde Y é a palavra que o usuário 1 informou no início do algoritmo. Não é necessário criar um procedimento/método/função para resolução desta questão. Utilize os componentes gráficos aprendidos em sala.

namespace primeiro
{
    public partial class FormProva1_ : Form
    {
        public FormProva1_()
        {
            InitializeComponent();
        }

        string palavra = "";
        int tentativas = 0;

	private void btnAdicionarPalavra_Click(object sender, EventArgs e)
        {
            if (palavra == "")
            {
                MessageBox.Show("Palavra adicionada, jogo iniciado");

                palavra = txtUsuario1.Text.ToLower();

                txtUsuario1.Clear();
                txtUsuario1.Enabled = false;
                btnAdicionarPalavra.Enabled = false;
                return;
            }
        }


        private void button1_Click(object sender, EventArgs e)
        {
            string palavraUsuario2 = txtPalavra.Text.ToLower();

            if (palavraUsuario2 == palavra)
            {
                MessageBox.Show($"Acertou em {tentativas} tentativas!");
            }
            else
            {
                MessageBox.Show("Palavra errada");
                tentativas++;
            }

            if (tentativas == 5)
            {
                MessageBox.Show($"Você perdeu, a palavra era {palavra}");
                return;
            }
        }
    }
}

5)Crie um programa que calcule o IMC de um usuário. O programa deve pedir a massa e a altura do usuário. A fórmula do IMC é MASSA/ALTURA². Se o IMC for menor de 19, o programa deve imprimir "ABAIXO DO PESO". Se o IMC estiver entre 20 e 24, o programa deve imprimir "NORMAL". Caso o IMC ultrapasse 24, o programa deve imprimir "ACIMA DO PESO".

namespace primeiro
{
    public partial class FormProva1_ : Form
    {
        public FormProva1_()
        {
            InitializeComponent();
        }

        private void btnCalcular_Click(object sender, EventArgs e)
        {
            double.TryParse(txtAltura.Text, out double altura);
            double.TryParse(txtMassa.Text, out double massa);

            MessageBox.Show(CalcularImc(massa, altura));
        }

        string CalcularImc(double massa, double altura)
        {
            double imc = massa / Math.Pow(altura, 2);

            if (imc <= 19)
            {
                return "Abaixo do peso";
            }
            if (imc <= 24)
            {
                return "Normal";
            }
            else
            {
                return "Acima do peso";
            }
        }
    }
}


6)Nos comandos abaixo, identifique os erros de programação:

  a)Console.WriteLine("Informe sua idade:");
  int idade = Console.ReadLine();
  if(idade = 12)
   {
      Console.WriteLine("Você tem 12 anos.");
   }
   if(idade = 16)
   {
      Console.WriteLine("Você tem 16 anos.");
   }

R: É um erro em tempo de compilação. Isso ocorre porque a função "Console.ReadLine()" possui uma string como retorno e não é possível armazenar uma string em uma váriavel inteira sem a função "int.Parse()". Outro erro que ocorre é quando tentamos comparar dentro do if a váriavel "idade = 12", isso não é possível porque apenas um "=" determina um novo valor para váriavel e não faz nenhuma comparação.

7)Ler o salário de uma pessoa e imprimir o Salário Líquido de acordo com a redução do imposto:

Menor ou igual a R$ 600,00 - ISENTO
Maior que R$ 600,00 e menor ou igual a 100 - 20% desconto
Maior que R$ 1.200,00 e menor ou igual a R$2000 - 25% desconto
Maior que R$ 2.000,00 - 30% desconto

Desenvolva uma função/método/procedimento para resolução desta atividade.

namespace primeiro
{
    public partial class FormProva1_ : Form
    {
        public FormProva1_()
        {
            InitializeComponent();
        }

        private void btnCalcular_Click(object sender, EventArgs e)
        {
            double.TryParse(txtSalario.Text, out double salario);

            MessageBox.Show($"O salário liquido é de {CalcularSalarioLiquido(salario).ToString("C2")}");
        }

        double CalcularSalarioLiquido(double salario)
        {
            if (salario <= 600)
            {
                return salario;
            }
            else if (salario <= 1200)
            {
                return salario * 0.80;
            }
            else if (salario <= 2000)
            { 
                return salario * 0.75;
            }
            else
            {
                return salario * 0.70;
            }
        }
    }
}


8)Faça um algoritmo para calcular a nota final de um atleta de arremesso de peso. O atleta tem 5 arremessos e a nota final é a soma das 3 distâncias intermediárias, desconsiderando a maior e a menor.
 Para isso, crie um método que aceite como parâmetro as cinco notas e retorne a nota final.

namespace primeiro
{
    public partial class FormProva1_ : Form
    {
        public FormProva1_()
        {
            InitializeComponent();
        }

        private void btnCalcular_Click(object sender, EventArgs e)
        {
            double.TryParse(txtArremesso1.Text, out double arremesso1);
            double.TryParse(txtArremesso2.Text, out double arremesso2);
            double.TryParse(txtArremesso3.Text, out double arremesso3);
            double.TryParse(txtArremesso4.Text, out double arremesso4);
            double.TryParse(txtArremesso5.Text, out double arremesso5);

            double notaFinal = CalcularNota(arremesso1, arremesso2, arremesso3, arremesso4, arremesso5);

            MessageBox.Show($"Nota final: {notaFinal}");

        }

        double CalcularNota(double arremessoA, double arremessoB, double arremessoC, double arremessoD, double arremessoE)
        {
            List<double> arremessos = new List<double>();
            arremessos.Add(arremessoA);
            arremessos.Add(arremessoB);
            arremessos.Add(arremessoC);
            arremessos.Add(arremessoD);
            arremessos.Add(arremessoE);

            arremessos.Remove(arremessos.Max());
            arremessos.Remove(arremessos.Min());

            return arremessos.Sum();
        }
    }
}

9)Qual a diferença entre erros em tempo de compilação para erros em tempo de execução?

R: Erros em tempo de compilação são erros que o visual studio reconhece e não permite que o programador compile o programa.
Erros em tempo de execução são aqueles erros em que o compilador não reconhece e deixa executar o programa normalmente.

10)Qual a diferença entre os tipos int/double?

R: Int é uma váriavel que armazena somente números inteiros, sem ponto flutuante. Já double, é um tipo de váriavel que armazena números com ponto flutuante.

11)Qual a diferença entre os componentes RadioButton e Checkbox.

R: Radio Button permite marcar somente uma opção por vez. Já a CheckBox permite que o usuário marque mais de uma ao mesmo tempo, caso queira.


