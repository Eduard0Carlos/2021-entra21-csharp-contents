TIPOS DE VARIÁVEIS: 

  

- string 

Armazena um valor string, com o intuito de leitura apenas. Aceita qualquer tipo de caractere. (Ocupa 2 bytes/caractere.) 

- byte 

byte é uma variável que aceita apenas os números inteiros (sem vírgula) de 0 a 255. (Ocupa apenas 1 byte.)

- int 

Integer armazena apenas números inteiros, com o intuito de calcula-los. 
Variáveis do tipo integer NÃO aceitam números com vírgula. (Ocupa 4 bytes.) 

- double 

Double’s aceitam qualquer tipo de número, com o intuito de cálculo. 
(Ocupa 8 bytes.) 

- long 

Semelhante a double, mas possui um limite maior. (Ocupa 8 bytes) 

- bool 

Variável usada em comparações. Pode retornar apenas dois valores: true (verdade) ou false (mentira). 

FUNÇÕES: 

	--Visuais--

- "MessageBox.Show({mensagem});"

Imprime na tela a {mensagem} entre parênteses (A mensagem deve ser em formato "string".)

	--Lista & Vetor--

- "{tipo do vetor}[] {nome do vetor};" 
- "{nome do vetor} = new {tipo do vetor}[número de componentes] {{componente1}, {componente2}};" 

Vetor é uma lista com vários componentes. Primeiramente criamos a lista, dando um nome e uma tipagem para ela. Depois declaramos os componentes usando o comando “new” (int[] números = new int [3] {0, 1, 2]). 
Então para usar os componentes, chamamos o vetor e a posição do componente entre colchetes: números[1];

- "List <{tipo}> {nome} = new List <{tipo}>();"
- "{nome}.Add({componente a ser adicionado});"

Uma lista funciona da mesma forma que um vetor, mas como você pode perceber, uma lista não tem um limite pré-definido, o que significa que para adicionar itens a lista, usamos apenas o comando ".Add()" (números.Add(1);.
Por outro lado, quando queremos chamar determinado componente da lista, usamos o mesmo comando que usamos em vetores, ou seja: números[0];

-"{vetor}.Length"

Conta todos os valores do vetor.

- "{lista}.Contains();"

Procura e informa se um determinado item já existe dentro da {lista}.

- "{lista}.Sum();"

Soma todos os valores numéricos da lista.

- "{lista}.Average();"

Calcula a média de todos os itens da lista.

-"{lista}.Max();"

Retorna o valor máximo (mais alto) da lista.

-"{lista}.Min();"

Retorna o valor mínimo (menor valor) da lista.

-"{lista}.Count"

Conta todos os valores da lista.

	--Conversões:-- 

- "{variável}.ToString()" ou “Convert.ToString({variável})”  

Converte o valor da {variável} para um valor em string. 

- "int.Parse({variável})" ou “Convert.ToInt({variável})”   

Converte o valor da {variável} entre parênteses, para um valor integer. 

- "double.Parse({variável})" ou “Convert.ToDouble({variável})”  

Converte o valor da {variável} entre parênteses para um valor double. 

- "long.Parse({variável})" ou “Convert.ToLong({variável})”  

Converte o valor da {variável} entre parênteses para um valor long. 

- "bool.Parse({variável})" ou Convert.ToBool({variável})” 

Converte o valor da {variável} entre parênteses para um valor bool. 

- "{variável}.ToUpper();"

Converte as letras da {variável} para MAIÚSCULAS.

	--Condições:--

- “if ({condição})”  

Impõe uma {condição} ao programa, e que caso seja atendida, executa certa parte do código que não seria executada se a condição não fosse atendida.  

Também é possível criar um comando “if” que é apenas executado se a {condição} imposta não ser atendida. Para isso, basta usar um ponto de exclamação “!” antes da {condição}. “if (! condição)”. 

- “else” 

O comando “else” é usado após um comando “if”, para que, caso a condição do comando “if” não seja atendida, o programa execute um parâmetro pré-definido pelo programador. 

	--Looping's:-- 

- "for (int i = 0; i < {condição}; i++)"

Em looping’s, o programa repete certa parte do código, enquanto a condição imposta retornar um valor true. Neste caso, o programa continuará se repetido enquanto o valor “i” ser menor do que a {condição} imposta. 

- "forr" ou "for (int i = {condição} - 1;  i  >=  0; i--)" 

O comando “forr” com dois r’s faz a mesma coisa que o comando “for”, só que ao contrário. Ou seja, o programa se repetirá enquanto o valor da condição ser maior que zero. 

- "while ({condição})" 

O comando “while” continua a repetir o código, enquanto a {condição} imposta ao comando retornar um valor true. 

	--Operações  & Comparadores--

-"{variável1} + {variável2}"

Soma os valores.

-"{variável1} - {variável2}"

Subtrai os valores.

-"{variável1} * {variável2}"

Multiplica os valores.

-"{variável1} / {variável2}"

Divide os valores.

-"Math.Pow({variável1}, {variável2});

Calcula a {variável1} elevado ao expoente {variável2}.

-"Math.Sqrt({variável1});
Calcula a raiz quadrada da {variável1}

- "{variável1} = = {variável2}"
Compara se a {variável1} é igual a {variável2}.

- "{variável1} ! = {variável2}"
Compara se a {variável1} é diferente de {variável2}.

- "{Variável1} % {Variável2}"
Divide as variáveis e retorna suas sobras.

- "&&"
Função que aplica uma condição, onde se valor A e B forem verdadeiros, executará um processo. Se A for verdade, mas B for falso (Ou vice-versa), ou se ambos forem falsos, executará outro processo.

- "||"
Função que aplica uma condição, na qual se ambos os valores A e B forem verdade, ou se apenas um deles forem verdade, executará um processo. Se ambos os valores forem falsos, executará outro processo.

	--COMANDOS (C#)--

F4: 
Exibe as propriedades do componente.

F5: 
Compila e executa o programa.

Shift + F5; 
Encerra a execução do programa.

F6: 
Apenas compila o programa, e procura por erros de compilação.

F7: 
Exibe a janela de código.

F9: 
Função de debugging, que permite ao programador analizar as linhas de sua escolha, para verificar a existência de bugs e erros.

F11: 
Executa o programa, linha por linha.

Shift + F7: 
Exibe a janela de design.

Ctrl + S:
Atalho de salvamento.

Ctrl + X; 
Recorta; exclui a linha inteira.

Ctrl + E, D: 
Organiza as linhas (chaves) do código.

Ctrl + E, C:
Converte as linhas selecionadas para comentários "//".

Ctrl + E, U:
Converte os comentários selecionados para código.
